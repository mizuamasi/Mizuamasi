# シェーダーで楽しむビジュアルプログラミング：VJワークショップ完全版スクリプト

## 1. 導入（9:15 - 9:30）

[講師は参加者が入室するのを待ち、全員が着席したら前に立つ]

講師: "おはようございます、皆様。本日は「シェーダーで楽しむビジュアルプログラミング」ワークショップにお越しいただき、ありがとうございます。私は[講師の名前]と申します。"

[スライド1: タイトルスライドを表示]

講師: "今日は、コンピューターグラフィックスの世界で重要な役割を果たす「シェーダー」について学び、それを使ったVJ（ビジュアルジョッキー）パフォーマンスの制作に挑戦します。プログラミングや数学に自信がない方もご安心ください。今日の焦点は「ビジュアル表現を楽しむこと」です。"

[講師は会場を見渡し、参加者の表情を確認]

講師: "では、簡単に自己紹介をお願いできますか？お名前と、このワークショップに参加された理由を教えていただけると嬉しいです。"

[講師は参加者を指名し、自己紹介を促す]

[参加者の自己紹介]

講師: "ありがとうございます。様々な背景やモチベーションをお持ちの方々とご一緒できて、とても楽しみです。それでは、シェーダーの世界への冒険を始めましょう。"

## 2. シェーダーって何？（9:30 - 10:00）

[スライド2: シェーダーの比較を表示]

講師: "まず、「シェーダー」という言葉をお聞きになったことはありますか？"

[参加者の反応を見る]

講師: "シェーダーは、コンピューターグラフィックスを作る特別なプログラムです。通常のプログラミングがテキストベースの処理を行うのに対し、シェーダーは主にビジュアル効果の作成に特化しています。"

[スライド3: ピクセルの世界を表示]

講師: "シェーダーを理解するには、まずピクセルについて知る必要があります。皆さんのスマートフォンやパソコンの画面をよーく近づいて見たことはありますか？"

[講師はジェスチャーで画面を近づけて見る動作を表現]

講師: "画面をよく見ると、たくさんの小さな点が見えますよね。その一つ一つの点が「ピクセル」です。シェーダーは、このピクセル一つ一つを操作することができるんです。"

[スライド4: ピクセル君たちに命令を出すイラストを表示]

講師: "シェーダーを使うことは、画面上の全てのピクセルに同時に指示を出すようなものです。例えば..."

[講師は指揮者のポーズをとる]

講師: "「赤くなれ！」と言えば、全てのピクセルが赤くなります。「左側は明るく、右側は暗くなれ！」と言えば、そのとおりになるんです。これが、シェーダーの基本的な考え方です。"

[スライド5: 簡単なシェーダーコードを表示]

講師: "では、実際にシェーダーのコードを見てみましょう。少し難しく見えるかもしれませんが、一緒に読み解いていきましょう。"

```glsl
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord/iResolution.xy;
    fragColor = vec4(uv.x, uv.y, 0.5, 1.0);
}
```

[講師はコードの各行を指し示しながら説明]

講師: "このコードは、画面上の各ピクセルの色を決定しています。`uv.x`と`uv.y`は、ピクセルの位置を表しています。左から右に行くほど赤くなり、下から上に行くほど緑が強くなります。そして、青は常に中程度の強さになっています。"

[コードの実行結果を表示]

講師: "実行すると、このようなグラデーションが表示されます。見えますか？左下が暗く、右上に行くほど明るくなっていますね。"

[講師は参加者の反応を確認]

講師: "ここまでで質問はありますか？シェーダーの基本的な考え方について、何か不明な点はありませんか？"

[参加者からの質問に答える]

講師: "素晴らしい質問です。[質問に対する回答]。他に質問がなければ、次は時間の要素を加えて、動きのある効果を作ってみましょう。"

## 3. 色と時間の変化（10:00 - 10:30）

[スライド6: 時間とともに変化する色を表示]

講師: "静止画も素敵ですが、動きのある映像はもっと魅力的ですよね。シェーダーでは、時間の経過に応じて色を変えることができます。"

[講師はスマートウォッチを指す仕草をする]

講師: "時間の概念をシェーダーに導入すると、まるで魔法のように映像が動き出します。こちらをご覧ください。"

[時間変化するシェーダーのデモを表示]

```glsl
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord/iResolution.xy;
    float time = iTime;
    
    float r = sin(time) * 0.5 + 0.5;
    float g = sin(time + 2.0) * 0.5 + 0.5;
    float b = sin(time + 4.0) * 0.5 + 0.5;
    
    fragColor = vec4(r, g, b, 1.0);
}
```

講師: "このコードでは、`sin`関数を使って時間に応じて色を変化させています。`sin`関数は-1から1の間で波を描くような動きをする関数で、これを利用して色の強さを周期的に変化させているんです。"

[講師は手で波のような動きを表現]

講師: "結果はこのようになります。見てください、時間とともに色が変化していきますね。"

[デモの実行結果を表示]

講師: "では、皆さんも試してみましょう。コードエディタを開いて、このコードを入力してください。そして、`sin`の前の数字を変えたり、`+`の後の数字を変えたりしてみてください。どんな変化が起こるでしょうか？"

[参加者が各自でコードを変更し、結果を確認する時間を設ける]

講師: [会場を歩き回りながら] "良いですね。面白い効果が出ていますね。ここを変えるとどうなりますか？"

[講師は必要に応じて個別にアドバイスを行う]

講師: "皆さん、素晴らしい作品ができていますね。色の変化のスピードや組み合わせを変えるだけで、こんなにも違った印象になるんですよ。"

[講師は前に戻る]

講師: "ここまでで質問はありますか？時間を使った色の変化について、何か不明な点はありませんか？"

[参加者からの質問に答える]

講師: "素晴らしい質問です。[質問に対する回答]。では次に、形を作る方法を見ていきましょう。"

## 4. 形を作ろう（10:30 - 11:00）

[スライド7: 距離を使って形を作るイメージを表示]

講師: "次は、画面に形を描いてみましょう。ここで使うのは「距離」という考え方です。"

[講師は両手を広げ、中心からの距離を表現]

講師: "想像してみてください。あなたが画面の中心にいて、周りのピクセルたちに「私からの距離」を聞いているんです。近いピクセルは小さな数字、遠いピクセルは大きな数字を答えます。この「距離」を使って、円や他の形を描くことができるんです。"

[スライド8: 円を描くシェーダーコードを表示]

講師: "こちらが円を描くシェーダーのコードです。一緒に見ていきましょう。"

```glsl
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord/iResolution.xy;
    uv = uv * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;
    
    float d = length(uv);
    
    float circle = smoothstep(0.5, 0.49, d);
    
    fragColor = vec4(vec3(circle), 1.0);
}
```

講師: "このコードでは、`length`関数を使って中心からの距離を計算し、`smoothstep`関数でその距離に応じて色を変えています。結果はこうなります。"

[コードの実行結果を表示]

講師: "見てください。きれいな円が描けましたね。"

[講師は円を指し示す]

講師: "では、皆さんも試してみましょう。このコードをエディタにコピーして、`smoothstep`の中の数値を変えてみてください。円の大きさがどう変わるか、観察してみてください。"

[参加者が各自でコードを変更し、結果を確認する時間を設ける]

講師: [会場を歩き回りながら] "なるほど、面白い形になっていますね。ここの数値を小さくすると、円が大きくなりますよ。"

[講師は必要に応じて個別にアドバイスを行う]

講師: "皆さん、素晴らしいです。単純な数値の変更だけで、こんなにも形を変えられるんですよ。"

[講師は前に戻る]

講師: "ここまでで質問はありますか？距離を使った形の作り方について、何か不明な点はありませんか？"

[参加者からの質問に答える]

講師: "良い質問です。[質問に対する回答]。次は、これまで学んだ「時間の変化」と「形」を組み合わせて、動きのある形を作ってみましょう。"

## 5. 動きのある形（11:00 - 11:30）

[スライド9: 動く円のアニメーションを表示]

講師: "さて、ここまでで学んだ「時間の変化」と「形」を組み合わせると、どうなると思いますか？そうです、動く形を作ることができるんです。"

[講師は手で円を描き、それを動かすジェスチャーをする]

講師: "例えば、画面上を動き回る円を作ってみましょう。こちらがコードです。"

[スライド10: 動く円を描くシェーダーコードを表示]

```glsl
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    vec2 uv = fragCoord/iResolution.xy;
    uv = uv * 2.0 - 1.0;
    uv.x *= iResolution.x / iResolution.y;
    
    vec2 move = vec2(sin(iTime) * 0.5, cos(iTime) * 0.5);
    float d = length(uv - move);
    
    float circle = smoothstep(0.3, 0.29, d);
    
    fragColor = vec4(circle, circle * 0.5, 1.0 - circle, 1.0);
}
```

講師: "このコードでは、`sin`と`cos`関数を使って円の中心位置を時間とともに変化させています。結果はこうなります。"

[コードの実行結果を表示]

講師: "見てください。円が画面上を動き回っていますね。色も変化していて、とても動的な印象を与えています。"

[講師は動く円を指し示す]

講師: "では、皆さんも試してみましょう。このコードをエディタにコピーして、`move`の計算部分を変更してみてください。例えば、`sin`の前の数値を大きくすると、動きが速くなります。色の設定も変えてみてください。"

[参加者が各自でコードを変更し、結果を確認する時間を設ける]

講師: [会場を歩き回りながら] "面白い動きになっていますね。ここの数値を変えると、円の軌道が変わりますよ。"

[講師は必要に応じて個別にアドバイスを行う]

講師: "皆さん、本当に素晴らしいです。少しの変更で、こんなにも多様な動きと色彩が生まれるんですね。シェーダーの魅力が伝わってきましたか？"

[講師は前に戻る]

講師: "ここまでで質問はありますか？動きのある形の作り方について、何か不明な点はありませんか？"

[参加者からの質問に答える]

講師: "鋭い質問ですね。[質問に対する回答]。ここまでで、シェーダーの基本的な要素を学びました。次は、これらの技術を使ってVJパフォーマンスを作る方法について説明します。"

## 6. VJの紹介と例示（11:30 - 12:00）

[スライド13: VJの定義と特徴を表示]

講師: "ここからは、シェーダーの応用としてのVJ（ビジュアルジョッキー）について紹介します。VJとは、音楽に合わせてリアルタイムで視覚効果を操作するパフォーマンスのことです。"

講師: "VJの魅力は、音楽と視覚の融合にあります。聴覚と視覚の両方に訴えかけることで、より豊かな体験を作り出すことができるんです。"

[スライド14: VJパフォーマンスの例を動画で表示]

講師: "こちらは、実際のVJパフォーマンスの例です。音楽のリズムや雰囲気に合わせて、視覚効果がどのように変化しているか、注目してご覧ください。"

[VJパフォーマンスの動画を再生]

講師: "いかがでしたか？音楽と視覚効果が見事に調和していましたね。特に注目してほしいのは以下の点です：

1. リズムとの同期：ビートに合わせて映像が変化しています。
2. 色彩の使い方：音楽の雰囲気に合わせて色調が変わっています。
3. 形状の変化：メロディーの流れに合わせて形が変形しています。
4. レイヤーの重ね合わせ：複数の要素を組み合わせて複雑な表現を作っています。"

[スライド15: シェーダーを使ったVJの利点を表示]

講師: "シェーダーを使ってVJを行うことの利点は、リアルタイムで複雑な計算ができ、滑らかで高品質な映像を生成できることです。今日の午後は、皆さんにもシェーダーを使ってVJパフォーマンスを作っていただきます。"

講師: "そして、今日の最終発表では、プロのDJさんに用意していただいた音楽に合わせて、皆さんにVJパフォーマンスを行っていただきます。"

[参加者の反応を確認]

講師: "午後の制作時間には、DJさんが用意した音楽を聴いて、それに合わせたビジュアルを作成していただきます。これは、実際のVJの現場でもよくある状況です。"

講師: "ここまでで質問はありますか？VJについて、もっと知りたいことはありますか？"

[参加者からの質問に答える]

講師: "素晴らしい質問です。[質問に対する回答]。では、お昼休憩に入る前に、午後の作業について簡単に説明します。"

## 7. 午後の作業説明（12:00 - 12:15）

[スライド16: 午後の作業の流れを表示]

講師: "午後は、以下のような流れで作業を進めます：

1. 13:00 - 13:30: DJ楽曲の紹介とVJコンセプトの立案
2. 13:30 - 15:30: シェーダープログラミングと視覚効果の作成
3. 15:30 - 16:00: リハーサルと最終調整
4. 16:00 - 17:30: VJパフォーマンス発表会（各自5分）

今回のワークショップでは、実際のVJ現場により近い環境を体験していただくために、DJの楽曲はあらかじめ決定されています。皆さんには、その楽曲に合わせてVJパフォーマンスを作成していただきます。"

講師: "昼食休憩の間に、どんなVJパフォーマンスをしたいか、大まかなイメージを考えておいてください。午後にDJの楽曲を聴いた後、そのイメージを具体化していきます。視覚効果のアイデアや、表現したいテーマなど、何でも構いません。"

[講師は参加者の表情を確認]

講師: "では、お昼休憩に入りましょう。13時に再開します。午後からの創作が楽しみですね。よい休憩を！"

## 8. 昼食休憩（12:15 - 13:00）

[参加者は昼食休憩。講師は会場に残り、質問対応や個別相談に応じる]

## 9. 午後の部：VJ作品の制作（13:00 - 16:00）

[参加者が戻ってきたことを確認]

講師: "お帰りなさい。皆さん、リフレッシュできましたか？さあ、いよいよVJ作品の制作に入ります。まずは、本日のDJを担当していただく〇〇さんをご紹介します。"

[DJの紹介]

DJ: "こんにちは。今日は皆さんのVJパフォーマンスのために音楽を担当させていただきます。用意した楽曲を聴いていただき、それに合わせた素晴らしいビジュアルを作成してください。"

講師: "ありがとうございます。それでは、DJさんに用意していただいた楽曲を聴いてみましょう。皆さん、音楽をよく聴いて、どんなビジュアルが合うか、イメージを膨らませてください。"

[DJが楽曲を再生。参加者は音楽を聴きながらメモを取るなどしてイメージを固める]

講師: "いかがでしたか？この音楽からどんなイメージが浮かびましたか？色、形、動き、雰囲気など、思いついたことを自由にメモしてみてください。"

[参加者が各自イメージをメモする時間を設ける]

講師: "では、メモしたイメージを基に、VJのコンセプトを決めていきましょう。音楽のテンポ、雰囲気、盛り上がりのポイントなどを考慮に入れてください。各自15分程度でコンセプトを固めてください。"

[参加者がコンセプトを決める時間を設ける]

講師: [会場を歩き回りながら] "面白いアイデアですね。この部分の盛り上がりには、こんな視覚効果が合うかもしれません。"

[講師は必要に応じて個別にアドバイスを行う]

講師: "コンセプトが決まったようですね。それでは、実際の制作に入りましょう。シェーダープログラミングを通じて、想像した視覚効果を実現していってください。音楽の構造をよく分析し、楽曲の展開に合わせた変化をつけることを意識してください。"

[参加者が制作を行う。講師とDJは会場を巡回し、適宜アドバイスや支援を行う]

講師: [2時間経過後] "皆さん、素晴らしい進捗ですね。残り30分です。ここからは作品の最終調整とリハーサルを行ってください。実際の楽曲に合わせて、タイミングの確認や操作の練習をしてみましょう。"

[参加者が最終調整とリハーサルを行う]

講師: "制作時間終了です。皆さん、素晴らしい作品に仕上がっていますね。音楽との調和が楽しみです。少し休憩を取ってから、VJパフォーマンスに移りましょう。"

## 10. VJパフォーマンス発表会（16:00 - 17:30）

[スライド17: VJパフォーマンス発表会の進行を表示]

講師: "いよいよVJパフォーマンス発表会の時間です。各自5分間のパフォーマンスを行っていただきます。DJさんに音楽を流していただき、それに合わせて皆さんがVJ演出を行います。パフォーマンスの前に、簡単に作品のコンセプトや工夫した点について1分程度で説明してください。"

講師: "評価のポイントは以下の通りです：
1. 視覚効果と音楽の調和
2. シェーダーの技術的な面白さ
3. 全体的な芸術性とオリジナリティ
4. 楽曲の構造を理解した演出の展開"

[各参加者が順番にVJパフォーマンスを行う。DJが音楽を担当し、参加者がそれに合わせてVJ演出を行う。講師は各パフォーマンス後に簡単なコメントをする]

講師: "素晴らしいパフォーマンスの数々、ありがとうございました。皆さん一人一人が、与えられた楽曲を深く理解し、独自の解釈で視覚化していて感動しました。音楽と視覚の見事な調和、そしてシェーダーの技術を駆使した表現力に感銘を受けました。"

## 11. まとめと振り返り（17:30 - 18:00）

[スライド18: ワークショップ全体の振り返りを表示]

講師: "最後に、今日一日を振り返ってみましょう。シェーダーについて新しく学んだこと、VJ制作で難しかった点、これからチャレンジしてみたいことなどを教えてください。"

[参加者から感想や意見を聞く]

講師: "ありがとうございます。皆さんの感想を聞いて、私もたくさんの刺激をいただきました。特に、音楽と視覚表現の融合という観点から、新しい可能性を感じました。"

[スライド19: 今後の学習リソースとVJ関連情報を表示]

講師: "シェーダーとVJの世界はとても広く、今日学んだことは入り口に過ぎません。もっと深く学びたい方のために、いくつかのリソースを紹介します。"

1. The Book of Shaders: シェーダーについての詳しいオンライン解説書です。
2. Shadertoy: 多くのシェーダー作品が公開されているサイトです。
3. IQ's Articles: 高度なシェーダーテクニックについての記事があります。
4. VJ Forums: VJコミュニティでの情報交換や最新トレンドを知るのに役立ちます。
5. Live Visuals: VJのテクニックやツールについての包括的な書籍です。

講師: "最後に、私からのメッセージです。VJは技術と芸術の融合です。プログラミングスキルを磨くと同時に、音楽や視覚芸術についても幅広く学んでいくことをおすすめします。そして何より、自分の感性を大切にしてください。技術は表現のための道具であり、最終的に重要なのは皆さんが伝えたいメッセージです。"

講師: "今日学んだことを活かして、これからも楽しくVJの世界を探検してください。皆さんのさらなる成長と、素晴らしいパフォーマンスを期待しています。"

[拍手]

講師: "本日は長時間にわたり、ご参加いただきありがとうございました。皆さんの今後の活動が実り多きものになることを心から願っています。それでは、お気をつけてお帰りください。"