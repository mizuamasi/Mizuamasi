webベースのVJソフト兼フラグメントシェーダーエディターを作成する

起動後、新規登録　ログインのどちらかを選ぶ画面
gas ニックネーム+パスワードの紐付けで登録
    スプレッドシートのログイン情報を見に行ってログイン処理
ユーザーごとにトラッキング
→使用時間のトラッキング gas 5分ごとに送る
保存ボタンを押された時にローカルキャッシュに保存
同時にgas経由でスプレッドシートに保存

スプレッドシートは、新規ユーザー登録されたら、新しいシートが作成される
シートの名前はニックネーム
使用時間+保存されたコードをセル分けて保存
縦に並べる

エディタの仕様
Shadertoyと互換性がある
黒ベースでカッコイイデザイン
エディタの背景　文字の背後に実行結果がキャンバスで表示
エディタは表示非表示変えられる

エディタ部分は画面左2/3　上2/3を占める
左側の下1/3をコンソールっぽいエリア　右の縦1/3をコントロール画面が埋める

コントロール画面は内部でuniform変数を宣言すると自動でスライダーが追加される
ここはVJっぽいデザインで、VJしやすいように追加される　floatからvec4まで対応

コンソールっぽいエリアは、シェーダーのエラーが表示される
このエディタ特有の機能としてprint関数がある
このprint関数はprint(変数)として使う
マウスのあるピクセルの変数の内部数値をリアルタイムに表示する
マウスが外れたら左上の座標を見る
これはglslのコードと同期して見えるようになる

print関数の使い方は初期コードの上にコメントとして表示されてる

ポップアップボタンを押すと、現在のコードのレンダリング結果が表示される
uniform変数やあらゆるコードの編集による変化がエディターと同期する
エラーが起きた時は、レンダリング結果はコンパイルが通った時の結果を維持
コンパイルが通るまで待ってる


エディタの使用感もアンケートに盛り込む
トラッキングすることについてインフォームドコンセント 入れる
トラッキングの可否も選べるように




1. **ユーザー認証とセキュリティ:**
   - **パスワードの保存方法:**
     研究用のアプリなので平文で大丈夫です
   - **セッション管理:**
     おすすめの方法があればそれで　適切なのを選んでください
   - **ニックネームの重複:**
     ニックネームの登録の際、ニックネームにハッシュ化したパスワードを付け加えた文字列を内部的には使ってください　区切り文字@を間に入れます

2. **使用時間のトラッキング:**
   - **データの形式:**
     jsonでやりとりするようにしてください　フォーマットは 名前,日時
   - **トラッキングの精度:**
     いきなりウィンドウを閉じた際も大丈夫なように、トラッキングの頻度を3分で行いましょう

3. **コードの保存と同期:**
   - **ローカルキャッシュの管理:**
     ブラウザのローカルストレーじで
   - **バージョン管理:**
     - 不要です　いきなり閉じた時に復旧させられるようにしておいて
        保存した際に、名前,保存時刻,内容でスプレッドシートに保存して

4. **スプレッドシートの構造:**
   - **データの配置:**
     分かりやすい形にして
   - **シート名の制約:**
     使用できない文字を、ニックネーム登録時に弾いて

5. **エディタの詳細:**
   - **使用する技術:**
     使いやすいものがいいです　背景を透過させ、キャンバスが見えるようにできるやつ
   - **機能要件:**
     - シンタックスハイライト、オートコンプリート、エラーチェックなどのエディタ機能の詳細。
        GLSL対応でこれらの機能が動くようにして
   - **背景に実行結果を表示:**
     - エディタの背景に実行結果を表示する際の具体的な方法や、テキストの可読性に関する考慮点。
     テキストは見えやすいように、色を調整　具体的にエディタの文字の後ろの部分にキャンバスで実行結果が見れれば何でもいいです

6. **コントロール画面:**
   - **uniform変数の検出方法:**
     取り出せるやり方であれば何でも
   - **スライダーの設定:**
     //option　という機能をつけて管理して　デフォルトでは-1~1にしておいて　少数第４位まで刻もう
   - **vec4の取り扱い:**
     - RGBAそれぞれにスライダーを設けて

7. **コンソールエリア:**
   - **print関数の実装:**
     printされたピクセルはバッファを利用して見える化しよう　一つのピクセルに複数printがあってもバグらないやり方がいいです
   - **エラー表示:**
     - シェーダーのコンパイルエラーやランタイムエラーをユーザーに分かりやすく表示する方法として、コードに印をつけて、何が違うか下に出すようにしよう

8. **ポップアップボタンとレンダリング結果:**
   - **ポップアップの挙動:**
     - ポップアップは新しいウィンドウで出します
   - **エラー時の動作:**
     - エラーが起きた時は直前のキャンバスの内容で動かし続けて　uniform変数iTimeを時間としたら、ずっと動き続けて

9. **デザインとUI/UX:**
   - **「カッコイイ」デザインの具体性:**
     白黒青あたりをベースに構成して
   - **レスポンシブ対応:**
     モバイル対応は不要です　フルHDを基準にある程度小さくても成立するようにレスポンシブなデザインにして

10. **GitHub Pagesでの公開:**
    - **GASとの連携:**
      fetchで行けないですかね
    - **デプロイ方法:**
     pushでリポジトリとしてあげます

11. **パフォーマンスと互換性:**
    - **サポートブラウザ:**
      - chromeを基準として
    - **パフォーマンス最適化:**
      - 負荷表示をトグルでみれるボタンも入れよう　他にアイデアがあれば実装して

12. **法的および倫理的考慮:**
    - **ユーザーデータの取り扱い:**
      - プライバシーポリシーや利用規約の策定が必要かどうか。
      とりあえずなくていい

13. **追加機能の要望:**
    - **マルチユーザーの同時編集:**
      - 将来的にリアルタイムコラボレーション機能を追加する予定があるか。
      今のところないです
    - **ファイルのインポート/エクスポート:**
      - シェーダーコードのファイル形式での保存や読み込み機能。
      shadertoy互換でできたらいいけど、一旦開くてよい
